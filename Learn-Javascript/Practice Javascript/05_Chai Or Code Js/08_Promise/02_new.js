// async await >> promise chains >> Callback hell
// ----------------------------------------------------

/* 
    # explore Asyncronus js

    |> Async await 

    |> Promise chains

    |> CallBack Hell


    ЁЯСЙ what is sync in js

    * -> synchronous

    |> ржХрзЛржи ржХрзЛржб ржпржЦржи рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржкрзНрж░рж┐ржирзНржЯ рж╣рзЯ рждржЦржи рж╕рзЗржЗржЯрж╛ржХрзЗ synchronous ржмрж▓рзЗред ржкрзНрж░ржержорзЗ рзз рж▓рж╛ржЗржирзЗрж░ ржХрж╛ржЬ рж╢рзЗрж╖ рж╣ржмрзЗ ржПрж░ ржкрж░рзЗ рзи рж▓рж╛ржЗржирзЗ ржЖрж╕ржмрзЗ ржПржмржВ ржХрж╛ржЬ рж╢рзЗрж╖ ржХрж░рзЗ рзй ржирж╛ржорзНржмрж╛рж░ рж▓рж╛ржЗржирзЗ ржпрж╛ржмрзЗред 

    * console.log("one");
    * console.log("Two");
    * console.log("Three");

    * -> Asynchronous
        |> ржХрзЛржб ржпржЦржи рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржкрзНрж░рж┐ржирзНржЯ рж╣рзЯ ржПржмржВ ржпржЦржи ржХрзЛржи ржХрзЛржб ржПржХржЯрж╛ ржЯрж╛ржЗржо [API ржХрж▓ ржХрж░рж▓рзЗ] рж▓рж╛ржЧрзЗ ржкрзНрж░рж┐ржирзНржЯ рж╣рждрзЗ рждржЦржи ржкрж░рзЗрж░ ржХрзЛржб ржЯрж╛ ржЪрж▓ржмрзЗ ржПржмржВ ржпрзЗржЗржЯрж╛ ржХрж▓ рж╣рждрзЗ ржЯрж╛ржЗржо рж▓рж╛ржЧржмрзЗ рж╕рзЗржЗржЯрж╛ ржирж┐ржЪрзЗ ржЪрж▓ржмрзЗред 

            * console.log("one"); ЁЯСЙ 1
            * console.log("Two"); ЁЯСЙ 2
            * console.log("Three"); ЁЯСЙ3 
            * console.log("API"); ЁЯСЙ 5
            * console.log("Four"); ЁЯСЙ 4
        

            * console.log("one"); ЁЯСЙ 1
            * console.log("Two"); ЁЯСЙ 2
            * setTimeout(function () {
            *     console.log("Three"); ЁЯСЙ 4
            *     }, 2000);
                
            * console.log("Four"); ЁЯСЙ 3

ЁЯСЙ -> CallBack

 * ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи ржПрж░ ржоржзрзНржпрзЗ ржЖрж░рзЗржХржЯрж┐ ржлрж╛ржВрж╢ржи ржкрзЗрж░рж╛ржорж┐ржЯрж╛рж░ рж╣рж┐рж╕рзЗржмрзЗ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ рж╕рзЗржЗржЯрж╛ржХрзЗ CallBack ржмрж▓рзЗ
 * CallBack function ржХрзЗ ржкрзЗрж░рж╛ржорж┐ржЯрж╛рж░ рж╣рж┐рж╕рзЗржмрзЗ ржкрж╛рж╕ ржХрж░рждрзЗ рж╣рж▓рзЗ рж╕рзБржзрзБ ржирж╛ржо ржжрж┐рждрзЗ рж╣ржмрзЗ 
     * -> тЬЕ funcName
     * -> тЭМ funcName()

ЁЯСЙ -> CallBack Hell

  * ржПржХржЯрж┐ CallBack ржлрж╛ржВрж╢ржи ржПрж░ ржоржзрзНржпрзЗ ржЖрж░рзЗржХржЯрж┐ CallBack ржПржб ржХрж░рж╛ ржмрж╛ ржирзЗрж╕рзНржЯрж┐ржВ ржХрж░рж╛ ржХрзЗ CallBack Hell ржмрж▓рзЗ


ЁЯСЙ -> Promise

  * promise ржПржХржЯрж╛ ржХрж╛ржЬ ржХржоржкрзНрж▓рж┐ржЯ ржХрж░ржмрзЗ, рж╕рзЗржЗржЯрж╛ Successful ржнрж╛ржмрзЗ рж╣рж▓рзЗ resolve state ржП ржпрж╛ржмрзЗ ржЖрж░ successfull ржирж╛ рж╣рж▓рзНрж░ Reject ржП ржпрж╛ржмрзЗред 
  * ржкрзНрж░ржорж┐рж╕рзЗрж╕ ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржП ржПржХржЯрж┐ ржЕржмрзНржЬрзЗржХрзНржЯ
  * Solution to callback hell
  * ржПржЗржЯрж╛ API ржХрж▓ ржПрж░  рж╕ржорзЯ ржХрж╛ржЬрзЗ рж▓рж╛ржЧрзЗред 
  * promise Return рж╣рзЯрзЗ ржЖрж╕рзЗ ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ ред 


  |> ЁЯСЙ Async-Await

*/

// =================================================

/*
// -> 1
console.log("one");
console.log("Two");
console.log("Three"); 
*/

// =================================================

/* 
// -> 2
console.log("one");
console.log("Two");

setTimeout(function () {
  console.log("Three");
}, 2000);

console.log("Four"); 

*/

// =================================================

// |> Callback syncronus way

/* function sum(a, b) {
  console.log(a + b);
}

function calculator(a, b, sumCallBack) {
  sumCallBack(a, b);
}

calculator(1, 2, sum); */

/* function sum(a, b) {
  console.log(a + b);
}

function multiply(a, b) {
  console.log(a * b);
}

function calculator(a, b, callBackCalculator) {
  callBackCalculator(a, b);
}

calculator(5, 2, sum);
calculator(5, 2, multiply);
calculator(5, 2, (a, b) => {
  console.log(a ** b);
}); */

// |> Callback Asyncronus way

/* const hello = () => {
  console.log("Hello Asyncronus");
};

setTimeout(hello, 3000); */

// ========================================

// |> Callback hell

/* function getData(dataID) {
  setTimeout(() => {
    console.log("data", dataID);
  }, 2000);
}

getData(123); */

/* function getData(dataId, getNextData) {
  setTimeout(() => {
    console.log("Data : ", dataId);
    if (getNextData) {
      getNextData();
    }
  }, 2000);
}

// getData(1, getData(2)); invalid

// * Callback Hell |> Nested callback
getData(1, () => {
  console.log("Getting Data 2 .........");
  getData(2, () => {
    console.log("Getting Data 3 .........");
    getData(3, () => {
      console.log("Getting Data 4 .........");
      getData(4, () => {
        console.log("Program Done");
      });
    });
  });
}); */

// |> ----------------------------------------------------

// |> Promise.............

/*
 * resolve, reject => Callback Function

 * 3 State In Promise
 * -> pending      =>
 * -> fullfiled    => Resolve
 * -> reject       => Rejected

    -> ржжрж╛рж░рж╛ржЬ ржерзЗржХрзЗ ржУрж░рзНржбрж╛рж░ ржХрж░рж▓рж╛ржо ржПржмржВ ржкрзЗржорзЗржирзНржЯ ржХрж░рж▓рж╛ржо, ржжрж╛рж░рж╛ржЬ ржерзЗржХрзЗ ржХрзЛржи ржХрж┐ржЫрзБ (рж╕ржорж╕рзНржпрж╛ ржмрж╛ ржЕржирзНржпржХрж┐ржЫрзБ) ржЬрж╛ржирж╛рзЯржирж┐ рждрж╛ржЗ ржПржЗржЯрж╛ рж╣ржЪрзНржЫрзЗ  pending State

    -> ржПржЦржи ржлрж╛ржЗржирж╛рж▓рж┐ ржУрж░рзНржбрж╛рж░ ржХрж░рж╛ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржжрж┐ржЫрзЗ ржПржЗржЯрж╛ рж╣ржЪрзНржЫрзЗ fullfiled ржмрж╛ Resolve State
    
    -> ржпржжрж┐ ржУрж░рзНржбрж╛рж░ ржХрзЛржи ржХрж╛рж░ржгрзЗ ржХрзЗржирзНрж╕рзЗрж▓ ржмрж╛ рж░рж┐ржлрж╛ржирзНржб ржХрж░рзЗ рждржЦржи рж╕рзЗржЗржЯрж╛  reject State


 */
/* let promiseIs = new Promise((resolve, reject) => {
  console.log("i'm a Promise");
  // resolve(123); //fullfill
  // resolve("Success"); //fullfill

  reject("Some Error"); //rejected
});

console.log(promiseIs); */

/* function getData(dataId, getnextData) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Data : ", dataId);
      resolve("Success");
      if (getnextData) {
        getnextData();
      }
      console.log(result);
    }, 4000);
  });
}
let result = getData(123);
console.log(result); */

/* function getData(dataId, getnextData) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      reject("Error");
      if (getnextData) {
        getnextData();
      }
      console.log(result);
    }, 4000);
  });
}
let result = getData(123);
console.log(result); */

/*
 * -> Use Promise
 * .then() & .catch()
 * Promise Fullfill рж╣ржУрзЯрж╛рж░ ржкрж░рзЗ ржХрж┐ржЫрзБ ржХрж╛ржЬ ржерж╛ржХрзЗ рж╕рзЗржЗржЯрж╛ ржЬржирзНржп Promise.then()
 * Promise Reject рж╣ржУрзЯрж╛рж░ ржкрж░рзЗ ржХрж┐ржЫрзБ ржХрж╛ржЬ ржерж╛ржХрзЗ рж╕рзЗржЗржЯрж╛ ржЬржирзНржп Promise.catch()
 * |> promise.then((res)=>{.....})
 * |> promise.catch((err)=>{.....})
 */

/* let Get_promise = () => {
  return new Promise((resolve, reject) => {
    console.log("I'm a Promise");
    // resolve("Success");
    reject("Error");
  });
};

let promise = Get_promise();
promise.then((res) => {
  console.log("Promise FUllfill", res);
});

promise.catch((err) => {
  console.log("Promise Rejected", err);
});
 */

/*
 * -> Promise CHain
  * .then((res) ={...}).then((res) => {...}) ржПржХ then ржПрж░ ржкрж░рзЗ ржЖрж░рзЗржХржЯрж┐ then ржжрж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рж╛ржХрзЗржЗ ржЪрзЗржЗржВ ржмрж▓рзЗред 

 */

/* function asyncFunc() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Some Data 1");
      resolve("Success");
    }, 2000);
  });
}
function asyncFunc2() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Some Data 2");
      resolve("Success");
    }, 3000);
  });
}

console.log("Fatching Data - 1");
let promise = asyncFunc();
promise.then((res) => {
  console.log(res);
});

console.log("Fatching Data - 2");
let promise2 = asyncFunc2();
promise2.then((res) => {
  console.log(res);
  }); */

/* fetch("https://randomuser.me/api/")
  .then((res) => {
    res.json();
  })
  .then((data) => {
    console.log("Find The Data");
    console.log(data.fetch);
  })
  .catch((err) => {
    console.log("Don't Find Any Data", err);
  }); */

/* function asyncFunc() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Some Data 1");
      resolve("Success");
    }, 2000);
  });
}
function asyncFunc2() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Some Data 2");
      resolve("Success");
    }, 3000);
  });
} */

/*  console.log("Fatching Data - 1");
  let promise = asyncFunc();
  promise.then((res) => {
    console.log(res);

    console.log("Fatching Data - 2");
    let promise2 = asyncFunc2();
    promise2.then((res) => {
      console.log(res);
    });

  }); */

// -> Short HANDs
/* console.log("Fatching Data - 1");
asyncFunc().then((res) => {
  console.log("Fatching Data - 2");
  asyncFunc2().then((res) => {});
}); */

/* function getData(dataId) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Data : ", dataId);
      resolve("Success");
    }, 2000);
  });
} */

// primise CHaing

/* getData(1).then((res) => {
  console.log(res);
  getData(2).then((res) => {
    console.log(res);
    getData(3).then((res) => {
      console.log(res);
    });
  });
}); */

/* getData(1)
  .then((res) => {
    return getData(2);
  })
  .then((res) => {
    // console.log(res);
    return getData(3);
  })
  .then((res) => {
    // console.log(res);
    return getData(4);
  })
  .then((res) => {
    console.log(res);
  }); */

/* 
======================================================================== 
* async-await >> Promise / Promise Chain >> callback Hell
======================================================================== 
// |> ЁЯСЙ Async-Await

  * Promise ржПрж░ ржХрзЛржбржХрзЗ ржЖрж░рзЛ рж╕рж╣ржЬ ржХрж░рзЗ ржлрзЗрж▓рзЗ
  * Async ржлрж╛ржВрж╢ржи рж╕ржмрж╕ржорзЯ Promise рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
  * ред|> async function myFunc(){...}
  
  |> Await
  * Await ржпрзЗржЦрж╛ржи ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ, рж╕рзЗржЦрж╛ржиржХрж╛рж░ ржХрзЛржи ржлрж╛ржВрж╢ржи ржерзЗржХрзЗ Promise ржЖрж╕рж▓рзЗ рж╕рзЗржЗржЯрж╛ ржпрждржЦржи ржкрж░рзНржпржирзНржд Panding State ржП ржерж╛ржХржмрзЗ рждрждржХрзНрж╖ржи Await ржмрж╛ржХрж┐ рж╕ржм ржлрж╛ржВрж╢ржи ржПрж░ ржХрж╛ржЬ ржерж╛ржорж┐рзЯрзЗ рж░рж╛ржЦржмрзЗред 
  * Async ржлрж╛ржВрж╢ржи ржПрж░ ржоржзрзНржпрзЗ await ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯрзЗ ржерж╛ржХрзЗред 
  * 200 for succesful API Call

*/

/* async function hello() {
  console.log("Hello Async");
}

hello(); */

/* function api() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("Weather Data");
      resolve(200);
    }, 2000);
  });
}

async function getWeatherData() {
  await api(); //1st Call
  await api(); //2nd Call
}

getWeatherData(); */

function getdata(getDataId) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log(`Data ${getDataId}`);
      resolve("Success");
    }, 1000);
  });
}

// Async-await

/* async function getALLData() {
  await getdata(1);
  await getdata(12);
  await getdata(123);
  await getdata(1234);
  await getdata(12345);
}

getALLData(); */

// -> Using IIFF
/* (async function getALLData() {
  await getdata(1);
  await getdata(12);
  await getdata(123);
  await getdata(1234);
  await getdata(12345);
})(); */

(async () => {
  await getdata(1);
  await getdata(12);
  await getdata(123);
  await getdata(1234);
  await getdata(12345);
})();
